// Generated by gencpp from file arob_mpc/vector_poses.msg
// DO NOT EDIT!


#ifndef AROB_MPC_MESSAGE_VECTOR_POSES_H
#define AROB_MPC_MESSAGE_VECTOR_POSES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>

namespace arob_mpc
{
template <class ContainerAllocator>
struct vector_poses_
{
  typedef vector_poses_<ContainerAllocator> Type;

  vector_poses_()
    : poses()
    , velocities()
    , accelerations()  {
    }
  vector_poses_(const ContainerAllocator& _alloc)
    : poses(_alloc)
    , velocities(_alloc)
    , accelerations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::PoseStamped_<ContainerAllocator> >> _poses_type;
  _poses_type poses;

   typedef std::vector< ::geometry_msgs::Twist_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Twist_<ContainerAllocator> >> _velocities_type;
  _velocities_type velocities;

   typedef std::vector< ::geometry_msgs::Accel_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Accel_<ContainerAllocator> >> _accelerations_type;
  _accelerations_type accelerations;





  typedef boost::shared_ptr< ::arob_mpc::vector_poses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arob_mpc::vector_poses_<ContainerAllocator> const> ConstPtr;

}; // struct vector_poses_

typedef ::arob_mpc::vector_poses_<std::allocator<void> > vector_poses;

typedef boost::shared_ptr< ::arob_mpc::vector_poses > vector_posesPtr;
typedef boost::shared_ptr< ::arob_mpc::vector_poses const> vector_posesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arob_mpc::vector_poses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arob_mpc::vector_poses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arob_mpc::vector_poses_<ContainerAllocator1> & lhs, const ::arob_mpc::vector_poses_<ContainerAllocator2> & rhs)
{
  return lhs.poses == rhs.poses &&
    lhs.velocities == rhs.velocities &&
    lhs.accelerations == rhs.accelerations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arob_mpc::vector_poses_<ContainerAllocator1> & lhs, const ::arob_mpc::vector_poses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arob_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arob_mpc::vector_poses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arob_mpc::vector_poses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arob_mpc::vector_poses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arob_mpc::vector_poses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arob_mpc::vector_poses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arob_mpc::vector_poses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arob_mpc::vector_poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a567ccd4fbf69367c1154429c5150ea";
  }

  static const char* value(const ::arob_mpc::vector_poses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a567ccd4fbf6936ULL;
  static const uint64_t static_value2 = 0x7c1154429c5150eaULL;
};

template<class ContainerAllocator>
struct DataType< ::arob_mpc::vector_poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arob_mpc/vector_poses";
  }

  static const char* value(const ::arob_mpc::vector_poses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arob_mpc::vector_poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseStamped[] poses\n"
"geometry_msgs/Twist[] velocities\n"
"geometry_msgs/Accel[] accelerations\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::arob_mpc::vector_poses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arob_mpc::vector_poses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poses);
      stream.next(m.velocities);
      stream.next(m.accelerations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vector_poses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arob_mpc::vector_poses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arob_mpc::vector_poses_<ContainerAllocator>& v)
  {
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "    ", v.velocities[i]);
    }
    s << indent << "accelerations[]" << std::endl;
    for (size_t i = 0; i < v.accelerations.size(); ++i)
    {
      s << indent << "  accelerations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "    ", v.accelerations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AROB_MPC_MESSAGE_VECTOR_POSES_H
